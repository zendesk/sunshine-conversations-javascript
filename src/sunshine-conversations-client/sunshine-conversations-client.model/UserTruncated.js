/**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 16.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The UserTruncated model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/UserTruncated
 * @version 16.0.1
 */
class UserTruncated {
    /**
     * Constructs a new <code>UserTruncated</code>.
     * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/UserTruncated
     */
    constructor() { 
        
        UserTruncated.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserTruncated</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/UserTruncated} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/UserTruncated} The populated <code>UserTruncated</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserTruncated();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('authenticated')) {
                obj['authenticated'] = ApiClient.convertToType(data['authenticated'], 'Boolean');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('zendeskId')) {
                obj['zendeskId'] = ApiClient.convertToType(data['zendeskId'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns The unique ID of the user.
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets The unique ID of the user.
     * @param {String} id The unique ID of the user.
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns Whether or not the user has authenticated, either via JWT or via the Help Center
     * @return {Boolean}
     */
    getAuthenticated() {
        return this.authenticated;
    }

    /**
     * Sets Whether or not the user has authenticated, either via JWT or via the Help Center
     * @param {Boolean} authenticated Whether or not the user has authenticated, either via JWT or via the Help Center
     */
    setAuthenticated(authenticated) {
        this['authenticated'] = authenticated;
    }
/**
     * Returns An optional ID that can also be used to retrieve the user. 
     * @return {String}
     */
    getExternalId() {
        return this.externalId;
    }

    /**
     * Sets An optional ID that can also be used to retrieve the user. 
     * @param {String} externalId An optional ID that can also be used to retrieve the user. 
     */
    setExternalId(externalId) {
        this['externalId'] = externalId;
    }
/**
     * Returns The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
     * @return {String}
     */
    getZendeskId() {
        return this.zendeskId;
    }

    /**
     * Sets The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
     * @param {String} zendeskId The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
     */
    setZendeskId(zendeskId) {
        this['zendeskId'] = zendeskId;
    }

}

/**
 * The unique ID of the user.
 * @member {String} id
 */
UserTruncated.prototype['id'] = undefined;

/**
 * Whether or not the user has authenticated, either via JWT or via the Help Center
 * @member {Boolean} authenticated
 */
UserTruncated.prototype['authenticated'] = undefined;

/**
 * An optional ID that can also be used to retrieve the user. 
 * @member {String} externalId
 */
UserTruncated.prototype['externalId'] = undefined;

/**
 * The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
 * @member {String} zendeskId
 */
UserTruncated.prototype['zendeskId'] = undefined;






export default UserTruncated;

