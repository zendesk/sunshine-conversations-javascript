/**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 15.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Identity from './Identity';
import Profile from './Profile';
import UserAllOf from './UserAllOf';
import UserTruncated from './UserTruncated';

/**
 * The User model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/User
 * @version 15.1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/User
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/UserTruncated
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/UserAllOf
     */
    constructor() { 
        UserTruncated.initialize(this);UserAllOf.initialize(this);
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/User} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();
            UserTruncated.constructFromObject(data, obj);
            UserAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('zendeskId')) {
                obj['zendeskId'] = ApiClient.convertToType(data['zendeskId'], 'String');
            }
            if (data.hasOwnProperty('signedUpAt')) {
                obj['signedUpAt'] = ApiClient.convertToType(data['signedUpAt'], 'String');
            }
            if (data.hasOwnProperty('toBeRetained')) {
                obj['toBeRetained'] = ApiClient.convertToType(data['toBeRetained'], 'Boolean');
            }
            if (data.hasOwnProperty('profile')) {
                obj['profile'] = ApiClient.convertToType(data['profile'], Profile);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('identities')) {
                obj['identities'] = ApiClient.convertToType(data['identities'], [Identity]);
            }
        }
        return obj;
    }

/**
     * Returns The unique ID of the user.
     * @return {String}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets The unique ID of the user.
     * @param {String} id The unique ID of the user.
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns An optional ID that can also be used to retrieve the user. 
     * @return {String}
     */
    getExternalId() {
        return this.externalId;
    }

    /**
     * Sets An optional ID that can also be used to retrieve the user. 
     * @param {String} externalId An optional ID that can also be used to retrieve the user. 
     */
    setExternalId(externalId) {
        this['externalId'] = externalId;
    }
/**
     * Returns The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
     * @return {String}
     */
    getZendeskId() {
        return this.zendeskId;
    }

    /**
     * Sets The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
     * @param {String} zendeskId The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
     */
    setZendeskId(zendeskId) {
        this['zendeskId'] = zendeskId;
    }
/**
     * @return {String}
     */
    getSignedUpAt() {
        return this.signedUpAt;
    }

    /**
     * @param {String} signedUpAt
     */
    setSignedUpAt(signedUpAt) {
        this['signedUpAt'] = signedUpAt;
    }
/**
     * @return {Boolean}
     */
    getToBeRetained() {
        return this.toBeRetained;
    }

    /**
     * @param {Boolean} toBeRetained
     */
    setToBeRetained(toBeRetained) {
        this['toBeRetained'] = toBeRetained;
    }
/**
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Profile}
     */
    getProfile() {
        return this.profile;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Profile} profile
     */
    setProfile(profile) {
        this['profile'] = profile;
    }
/**
     * @return {Object}
     */
    getMetadata() {
        return this.metadata;
    }

    /**
     * @param {Object} metadata
     */
    setMetadata(metadata) {
        this['metadata'] = metadata;
    }
/**
     * Returns The user's connected identities.
     * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Identity>}
     */
    getIdentities() {
        return this.identities;
    }

    /**
     * Sets The user's connected identities.
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Identity>} identities The user's connected identities.
     */
    setIdentities(identities) {
        this['identities'] = identities;
    }

}

/**
 * The unique ID of the user.
 * @member {String} id
 */
User.prototype['id'] = undefined;

/**
 * An optional ID that can also be used to retrieve the user. 
 * @member {String} externalId
 */
User.prototype['externalId'] = undefined;

/**
 * The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
 * @member {String} zendeskId
 */
User.prototype['zendeskId'] = undefined;

/**
 * @member {String} signedUpAt
 */
User.prototype['signedUpAt'] = undefined;

/**
 * @member {Boolean} toBeRetained
 */
User.prototype['toBeRetained'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Profile} profile
 */
User.prototype['profile'] = undefined;

/**
 * @member {Object} metadata
 */
User.prototype['metadata'] = undefined;

/**
 * The user's connected identities.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Identity>} identities
 */
User.prototype['identities'] = undefined;


// Implement UserTruncated interface:
/**
 * The unique ID of the user.
 * @member {String} id
 */
UserTruncated.prototype['id'] = undefined;
/**
 * An optional ID that can also be used to retrieve the user. 
 * @member {String} externalId
 */
UserTruncated.prototype['externalId'] = undefined;
/**
 * The ID that links a messaging user to its core Zendesk user counterpart. This ID can be used to fetch the core user record via the Zendesk Support API. 
 * @member {String} zendeskId
 */
UserTruncated.prototype['zendeskId'] = undefined;
// Implement UserAllOf interface:
/**
 * @member {String} signedUpAt
 */
UserAllOf.prototype['signedUpAt'] = undefined;
/**
 * @member {Boolean} toBeRetained
 */
UserAllOf.prototype['toBeRetained'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Profile} profile
 */
UserAllOf.prototype['profile'] = undefined;
/**
 * @member {Object} metadata
 */
UserAllOf.prototype['metadata'] = undefined;
/**
 * The user's connected identities.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Identity>} identities
 */
UserAllOf.prototype['identities'] = undefined;




export default User;

