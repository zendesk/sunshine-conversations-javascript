/**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 14.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import ActionSubset from './ActionSubset';
import CarouselMessage from './CarouselMessage';
import CarouselMessageDisplaySettings from './CarouselMessageDisplaySettings';
import FileMessage from './FileMessage';
import FormMessage from './FormMessage';
import FormResponseMessage from './FormResponseMessage';
import FormResponseMessageField from './FormResponseMessageField';
import ImageMessage from './ImageMessage';
import Item from './Item';
import ListMessage from './ListMessage';
import LocationMessage from './LocationMessage';
import LocationMessageCoordinates from './LocationMessageCoordinates';
import LocationMessageLocation from './LocationMessageLocation';
import TemplateMessage from './TemplateMessage';
import TextMessage from './TextMessage';

/**
 * The Content model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Content
 * @version 14.4.0
 */
class Content {
    /**
     * Constructs a new <code>Content</code>.
     * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Content
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/TextMessage
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessage
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/FileMessage
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/FormMessage
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessage
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ImageMessage
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ListMessage
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessage
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/TemplateMessage
     * @param type {String} The type of message.
     * @param items {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} An array of objects representing the items associated with the message. Only present in carousel and list type messages.
     * @param mediaUrl {String} The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
     * @param fields {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField>} Array of field objects that contain the submitted fields.
     * @param coordinates {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates} 
     * @param template {Object} The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
     */
    constructor(type, items, mediaUrl, fields, coordinates, template) { 
        TextMessage.initialize(this, type);CarouselMessage.initialize(this, type, items);FileMessage.initialize(this, type, mediaUrl);FormMessage.initialize(this, type, fields);FormResponseMessage.initialize(this, type, fields);ImageMessage.initialize(this, type, mediaUrl);ListMessage.initialize(this, type, items);LocationMessage.initialize(this, type, coordinates);TemplateMessage.initialize(this, type, template);
        Content.initialize(this, type, items, mediaUrl, fields, coordinates, template);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, items, mediaUrl, fields, coordinates, template) { 
        obj['type'] = type;
        obj['items'] = items;
        obj['mediaUrl'] = mediaUrl;
        obj['fields'] = fields;
        obj['coordinates'] = coordinates;
        obj['template'] = template;
    }

    /**
     * Constructs a <code>Content</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Content} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Content} The populated <code>Content</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Content();
            TextMessage.constructFromObject(data, obj);
            CarouselMessage.constructFromObject(data, obj);
            FileMessage.constructFromObject(data, obj);
            FormMessage.constructFromObject(data, obj);
            FormResponseMessage.constructFromObject(data, obj);
            ImageMessage.constructFromObject(data, obj);
            ListMessage.constructFromObject(data, obj);
            LocationMessage.constructFromObject(data, obj);
            TemplateMessage.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('htmlText')) {
                obj['htmlText'] = ApiClient.convertToType(data['htmlText'], 'String');
            }
            if (data.hasOwnProperty('markdownText')) {
                obj['markdownText'] = ApiClient.convertToType(data['markdownText'], 'String');
            }
            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [ActionSubset]);
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('displaySettings')) {
                obj['displaySettings'] = CarouselMessageDisplaySettings.constructFromObject(data['displaySettings']);
            }
            if (data.hasOwnProperty('mediaUrl')) {
                obj['mediaUrl'] = ApiClient.convertToType(data['mediaUrl'], 'String');
            }
            if (data.hasOwnProperty('mediaSize')) {
                obj['mediaSize'] = ApiClient.convertToType(data['mediaSize'], 'Number');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('altText')) {
                obj['altText'] = ApiClient.convertToType(data['altText'], 'String');
            }
            if (data.hasOwnProperty('attachmentId')) {
                obj['attachmentId'] = ApiClient.convertToType(data['attachmentId'], 'String');
            }
            if (data.hasOwnProperty('submitted')) {
                obj['submitted'] = ApiClient.convertToType(data['submitted'], 'Boolean');
            }
            if (data.hasOwnProperty('blockChatInput')) {
                obj['blockChatInput'] = ApiClient.convertToType(data['blockChatInput'], 'Boolean');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [FormResponseMessageField]);
            }
            if (data.hasOwnProperty('textFallback')) {
                obj['textFallback'] = ApiClient.convertToType(data['textFallback'], 'String');
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = LocationMessageCoordinates.constructFromObject(data['coordinates']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationMessageLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], Object);
            }
        }
        return obj;
    }

/**
     * Returns The type of message.
     * @return {String}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of message.
     * @param {String} type The type of message.
     */
    setType(type) {
        this['type'] = type;
    }
/**
     * Returns The fallback text message used when location messages are not supported by the channel.
     * @return {String}
     */
    getText() {
        return this.text;
    }

    /**
     * Sets The fallback text message used when location messages are not supported by the channel.
     * @param {String} text The fallback text message used when location messages are not supported by the channel.
     */
    setText(text) {
        this['text'] = text;
    }
/**
     * Returns HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     * @return {String}
     */
    getHtmlText() {
        return this.htmlText;
    }

    /**
     * Sets HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     * @param {String} htmlText HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     */
    setHtmlText(htmlText) {
        this['htmlText'] = htmlText;
    }
/**
     * Returns Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     * @return {String}
     */
    getMarkdownText() {
        return this.markdownText;
    }

    /**
     * Sets Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     * @param {String} markdownText Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     */
    setMarkdownText(markdownText) {
        this['markdownText'] = markdownText;
    }
/**
     * Returns An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
     * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset>}
     */
    getActions() {
        return this.actions;
    }

    /**
     * Sets An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset>} actions An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
     */
    setActions(actions) {
        this['actions'] = actions;
    }
/**
     * Returns The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
     * @return {String}
     */
    getPayload() {
        return this.payload;
    }

    /**
     * Sets The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
     * @param {String} payload The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
     */
    setPayload(payload) {
        this['payload'] = payload;
    }
/**
     * Returns An array of objects representing the items associated with the message. Only present in carousel and list type messages.
     * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>}
     */
    getItems() {
        return this.items;
    }

    /**
     * Sets An array of objects representing the items associated with the message. Only present in carousel and list type messages.
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} items An array of objects representing the items associated with the message. Only present in carousel and list type messages.
     */
    setItems(items) {
        this['items'] = items;
    }
/**
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessageDisplaySettings}
     */
    getDisplaySettings() {
        return this.displaySettings;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessageDisplaySettings} displaySettings
     */
    setDisplaySettings(displaySettings) {
        this['displaySettings'] = displaySettings;
    }
/**
     * Returns The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
     * @return {String}
     */
    getMediaUrl() {
        return this.mediaUrl;
    }

    /**
     * Sets The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
     * @param {String} mediaUrl The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
     */
    setMediaUrl(mediaUrl) {
        this['mediaUrl'] = mediaUrl;
    }
/**
     * Returns The size of the media in bytes.
     * @return {Number}
     */
    getMediaSize() {
        return this.mediaSize;
    }

    /**
     * Sets The size of the media in bytes.
     * @param {Number} mediaSize The size of the media in bytes.
     */
    setMediaSize(mediaSize) {
        this['mediaSize'] = mediaSize;
    }
/**
     * Returns The type of media.
     * @return {String}
     */
    getMediaType() {
        return this.mediaType;
    }

    /**
     * Sets The type of media.
     * @param {String} mediaType The type of media.
     */
    setMediaType(mediaType) {
        this['mediaType'] = mediaType;
    }
/**
     * Returns An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
     * @return {String}
     */
    getAltText() {
        return this.altText;
    }

    /**
     * Sets An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
     * @param {String} altText An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
     */
    setAltText(altText) {
        this['altText'] = altText;
    }
/**
     * Returns An identifier used by Sunshine Conversations for internal purposes.
     * @return {String}
     */
    getAttachmentId() {
        return this.attachmentId;
    }

    /**
     * Sets An identifier used by Sunshine Conversations for internal purposes.
     * @param {String} attachmentId An identifier used by Sunshine Conversations for internal purposes.
     */
    setAttachmentId(attachmentId) {
        this['attachmentId'] = attachmentId;
    }
/**
     * Returns Flag which states whether the form is submitted.
     * @return {Boolean}
     */
    getSubmitted() {
        return this.submitted;
    }

    /**
     * Sets Flag which states whether the form is submitted.
     * @param {Boolean} submitted Flag which states whether the form is submitted.
     */
    setSubmitted(submitted) {
        this['submitted'] = submitted;
    }
/**
     * Returns true if the message should block the chat input on Web Messenger.
     * @return {Boolean}
     */
    getBlockChatInput() {
        return this.blockChatInput;
    }

    /**
     * Sets true if the message should block the chat input on Web Messenger.
     * @param {Boolean} blockChatInput true if the message should block the chat input on Web Messenger.
     */
    setBlockChatInput(blockChatInput) {
        this['blockChatInput'] = blockChatInput;
    }
/**
     * Returns Array of field objects that contain the submitted fields.
     * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField>}
     */
    getFields() {
        return this.fields;
    }

    /**
     * Sets Array of field objects that contain the submitted fields.
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField>} fields Array of field objects that contain the submitted fields.
     */
    setFields(fields) {
        this['fields'] = fields;
    }
/**
     * Returns A string containing the `label: value` of all fields, each separated by a newline character.
     * @return {String}
     */
    getTextFallback() {
        return this.textFallback;
    }

    /**
     * Sets A string containing the `label: value` of all fields, each separated by a newline character.
     * @param {String} textFallback A string containing the `label: value` of all fields, each separated by a newline character.
     */
    setTextFallback(textFallback) {
        this['textFallback'] = textFallback;
    }
/**
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates}
     */
    getCoordinates() {
        return this.coordinates;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates} coordinates
     */
    setCoordinates(coordinates) {
        this['coordinates'] = coordinates;
    }
/**
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageLocation}
     */
    getLocation() {
        return this.location;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageLocation} location
     */
    setLocation(location) {
        this['location'] = location;
    }
/**
     * Returns The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
     * @return {Object}
     */
    getTemplate() {
        return this.template;
    }

    /**
     * Sets The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
     * @param {Object} template The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
     */
    setTemplate(template) {
        this['template'] = template;
    }

}

/**
 * The type of message.
 * @member {String} type
 * @default 'template'
 */
Content.prototype['type'] = 'template';

/**
 * The fallback text message used when location messages are not supported by the channel.
 * @member {String} text
 */
Content.prototype['text'] = undefined;

/**
 * HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} htmlText
 */
Content.prototype['htmlText'] = undefined;

/**
 * Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} markdownText
 */
Content.prototype['markdownText'] = undefined;

/**
 * An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset>} actions
 */
Content.prototype['actions'] = undefined;

/**
 * The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
 * @member {String} payload
 */
Content.prototype['payload'] = undefined;

/**
 * An array of objects representing the items associated with the message. Only present in carousel and list type messages.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} items
 */
Content.prototype['items'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessageDisplaySettings} displaySettings
 */
Content.prototype['displaySettings'] = undefined;

/**
 * The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
 * @member {String} mediaUrl
 */
Content.prototype['mediaUrl'] = undefined;

/**
 * The size of the media in bytes.
 * @member {Number} mediaSize
 */
Content.prototype['mediaSize'] = undefined;

/**
 * The type of media.
 * @member {String} mediaType
 */
Content.prototype['mediaType'] = undefined;

/**
 * An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
 * @member {String} altText
 */
Content.prototype['altText'] = undefined;

/**
 * An identifier used by Sunshine Conversations for internal purposes.
 * @member {String} attachmentId
 */
Content.prototype['attachmentId'] = undefined;

/**
 * Flag which states whether the form is submitted.
 * @member {Boolean} submitted
 */
Content.prototype['submitted'] = undefined;

/**
 * true if the message should block the chat input on Web Messenger.
 * @member {Boolean} blockChatInput
 */
Content.prototype['blockChatInput'] = undefined;

/**
 * Array of field objects that contain the submitted fields.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField>} fields
 */
Content.prototype['fields'] = undefined;

/**
 * A string containing the `label: value` of all fields, each separated by a newline character.
 * @member {String} textFallback
 */
Content.prototype['textFallback'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates} coordinates
 */
Content.prototype['coordinates'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageLocation} location
 */
Content.prototype['location'] = undefined;

/**
 * The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
 * @member {Object} template
 */
Content.prototype['template'] = undefined;


// Implement TextMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'text'
 */
TextMessage.prototype['type'] = 'text';
/**
 * The text content of the message. Required unless `actions`, `htmlText` or `markdownText` is provided.
 * @member {String} text
 */
TextMessage.prototype['text'] = undefined;
/**
 * HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} htmlText
 */
TextMessage.prototype['htmlText'] = undefined;
/**
 * Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} markdownText
 */
TextMessage.prototype['markdownText'] = undefined;
/**
 * Array of message actions.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Action>} actions
 */
TextMessage.prototype['actions'] = undefined;
/**
 * The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
 * @member {String} payload
 */
TextMessage.prototype['payload'] = undefined;
// Implement CarouselMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'carousel'
 */
CarouselMessage.prototype['type'] = 'carousel';
/**
 * The fallback text message used when carousel messages are not supported by the channel.
 * @member {String} text
 */
CarouselMessage.prototype['text'] = undefined;
/**
 * An array of objects representing the items associated with the message. Only present in carousel and list type messages.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} items
 */
CarouselMessage.prototype['items'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessageDisplaySettings} displaySettings
 */
CarouselMessage.prototype['displaySettings'] = undefined;
// Implement FileMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'file'
 */
FileMessage.prototype['type'] = 'file';
/**
 * The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
 * @member {String} mediaUrl
 */
FileMessage.prototype['mediaUrl'] = undefined;
/**
 * The size of the media.
 * @member {Number} mediaSize
 */
FileMessage.prototype['mediaSize'] = undefined;
/**
 * The media type of the file.
 * @member {String} mediaType
 */
FileMessage.prototype['mediaType'] = undefined;
/**
 * An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
 * @member {String} altText
 */
FileMessage.prototype['altText'] = undefined;
/**
 * The text content of the message.
 * @member {String} text
 */
FileMessage.prototype['text'] = undefined;
/**
 * HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} htmlText
 */
FileMessage.prototype['htmlText'] = undefined;
/**
 * Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} markdownText
 */
FileMessage.prototype['markdownText'] = undefined;
/**
 * An identifier used by Sunshine Conversations for internal purposes.
 * @member {String} attachmentId
 */
FileMessage.prototype['attachmentId'] = undefined;
// Implement FormMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'form'
 */
FormMessage.prototype['type'] = 'form';
/**
 * Flag which states whether the form is submitted.
 * @member {Boolean} submitted
 */
FormMessage.prototype['submitted'] = undefined;
/**
 * true if the message should block the chat input on Web Messenger.
 * @member {Boolean} blockChatInput
 */
FormMessage.prototype['blockChatInput'] = undefined;
/**
 * An array of objects representing fields associated with the message. Only present in form and formResponse messages.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/FormMessageField>} fields
 */
FormMessage.prototype['fields'] = undefined;
// Implement FormResponseMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'formResponse'
 */
FormResponseMessage.prototype['type'] = 'formResponse';
/**
 * Array of field objects that contain the submitted fields.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField>} fields
 */
FormResponseMessage.prototype['fields'] = undefined;
/**
 * A string containing the `label: value` of all fields, each separated by a newline character.
 * @member {String} textFallback
 */
FormResponseMessage.prototype['textFallback'] = undefined;
// Implement ImageMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'image'
 */
ImageMessage.prototype['type'] = 'image';
/**
 * The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
 * @member {String} mediaUrl
 */
ImageMessage.prototype['mediaUrl'] = undefined;
/**
 * The type of media.
 * @member {String} mediaType
 */
ImageMessage.prototype['mediaType'] = undefined;
/**
 * The size of the media in bytes.
 * @member {Number} mediaSize
 */
ImageMessage.prototype['mediaSize'] = undefined;
/**
 * An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
 * @member {String} altText
 */
ImageMessage.prototype['altText'] = undefined;
/**
 * The text content of the message.
 * @member {String} text
 */
ImageMessage.prototype['text'] = undefined;
/**
 * HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} htmlText
 */
ImageMessage.prototype['htmlText'] = undefined;
/**
 * Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} markdownText
 */
ImageMessage.prototype['markdownText'] = undefined;
/**
 * Array of message actions.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Action>} actions
 */
ImageMessage.prototype['actions'] = undefined;
/**
 * An identifier used by Sunshine Conversations for internal purposes.
 * @member {String} attachmentId
 */
ImageMessage.prototype['attachmentId'] = undefined;
// Implement ListMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'list'
 */
ListMessage.prototype['type'] = 'list';
/**
 * An array of objects representing the items associated with the message. Only present in carousel and list type messages.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} items
 */
ListMessage.prototype['items'] = undefined;
/**
 * An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset>} actions
 */
ListMessage.prototype['actions'] = undefined;
// Implement LocationMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'location'
 */
LocationMessage.prototype['type'] = 'location';
/**
 * The fallback text message used when location messages are not supported by the channel.
 * @member {String} text
 */
LocationMessage.prototype['text'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates} coordinates
 */
LocationMessage.prototype['coordinates'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageLocation} location
 */
LocationMessage.prototype['location'] = undefined;
// Implement TemplateMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'template'
 */
TemplateMessage.prototype['type'] = 'template';
/**
 * The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
 * @member {Object} template
 */
TemplateMessage.prototype['template'] = undefined;




export default Content;

