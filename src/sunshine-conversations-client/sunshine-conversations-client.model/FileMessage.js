/**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 15.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The FileMessage model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/FileMessage
 * @version 15.0.0
 */
class FileMessage {
    /**
     * Constructs a new <code>FileMessage</code>.
     * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/FileMessage
     * @param type {String} The type of message.
     * @param mediaUrl {String} The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
     */
    constructor(type, mediaUrl) { 
        
        FileMessage.initialize(this, type, mediaUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, mediaUrl) { 
        obj['type'] = type;
        obj['mediaUrl'] = mediaUrl;
    }

    /**
     * Constructs a <code>FileMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/FileMessage} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/FileMessage} The populated <code>FileMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileMessage();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('mediaUrl')) {
                obj['mediaUrl'] = ApiClient.convertToType(data['mediaUrl'], 'String');
            }
            if (data.hasOwnProperty('mediaSize')) {
                obj['mediaSize'] = ApiClient.convertToType(data['mediaSize'], 'Number');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('altText')) {
                obj['altText'] = ApiClient.convertToType(data['altText'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('htmlText')) {
                obj['htmlText'] = ApiClient.convertToType(data['htmlText'], 'String');
            }
            if (data.hasOwnProperty('markdownText')) {
                obj['markdownText'] = ApiClient.convertToType(data['markdownText'], 'String');
            }
            if (data.hasOwnProperty('attachmentId')) {
                obj['attachmentId'] = ApiClient.convertToType(data['attachmentId'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns The type of message.
     * @return {String}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of message.
     * @param {String} type The type of message.
     */
    setType(type) {
        this['type'] = type;
    }
/**
     * Returns The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
     * @return {String}
     */
    getMediaUrl() {
        return this.mediaUrl;
    }

    /**
     * Sets The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
     * @param {String} mediaUrl The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
     */
    setMediaUrl(mediaUrl) {
        this['mediaUrl'] = mediaUrl;
    }
/**
     * Returns The size of the media.
     * @return {Number}
     */
    getMediaSize() {
        return this.mediaSize;
    }

    /**
     * Sets The size of the media.
     * @param {Number} mediaSize The size of the media.
     */
    setMediaSize(mediaSize) {
        this['mediaSize'] = mediaSize;
    }
/**
     * Returns The media type of the file.
     * @return {String}
     */
    getMediaType() {
        return this.mediaType;
    }

    /**
     * Sets The media type of the file.
     * @param {String} mediaType The media type of the file.
     */
    setMediaType(mediaType) {
        this['mediaType'] = mediaType;
    }
/**
     * Returns An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
     * @return {String}
     */
    getAltText() {
        return this.altText;
    }

    /**
     * Sets An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
     * @param {String} altText An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
     */
    setAltText(altText) {
        this['altText'] = altText;
    }
/**
     * Returns The text content of the message.
     * @return {String}
     */
    getText() {
        return this.text;
    }

    /**
     * Sets The text content of the message.
     * @param {String} text The text content of the message.
     */
    setText(text) {
        this['text'] = text;
    }
/**
     * Returns HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     * @return {String}
     */
    getHtmlText() {
        return this.htmlText;
    }

    /**
     * Sets HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     * @param {String} htmlText HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     */
    setHtmlText(htmlText) {
        this['htmlText'] = htmlText;
    }
/**
     * Returns Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     * @return {String}
     */
    getMarkdownText() {
        return this.markdownText;
    }

    /**
     * Sets Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     * @param {String} markdownText Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
     */
    setMarkdownText(markdownText) {
        this['markdownText'] = markdownText;
    }
/**
     * Returns An identifier used by Sunshine Conversations for internal purposes.
     * @return {String}
     */
    getAttachmentId() {
        return this.attachmentId;
    }

    /**
     * Sets An identifier used by Sunshine Conversations for internal purposes.
     * @param {String} attachmentId An identifier used by Sunshine Conversations for internal purposes.
     */
    setAttachmentId(attachmentId) {
        this['attachmentId'] = attachmentId;
    }

}

/**
 * The type of message.
 * @member {String} type
 * @default 'file'
 */
FileMessage.prototype['type'] = 'file';

/**
 * The URL for media, such as an image, attached to the message. <aside class=\"notice\">Note that for private attachments an authorization header is required to access the mediaUrl. See [configuring private attachments for messaging](https://developer.zendesk.com/documentation/zendesk-web-widget-sdks/messaging_private_attachments/) guide for more details.</aside> 
 * @member {String} mediaUrl
 */
FileMessage.prototype['mediaUrl'] = undefined;

/**
 * The size of the media.
 * @member {Number} mediaSize
 */
FileMessage.prototype['mediaSize'] = undefined;

/**
 * The media type of the file.
 * @member {String} mediaType
 */
FileMessage.prototype['mediaType'] = undefined;

/**
 * An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
 * @member {String} altText
 */
FileMessage.prototype['altText'] = undefined;

/**
 * The text content of the message.
 * @member {String} text
 */
FileMessage.prototype['text'] = undefined;

/**
 * HTML text content of the message. Can be provided in place of `text`. Cannot be used with `markdownText`. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} htmlText
 */
FileMessage.prototype['htmlText'] = undefined;

/**
 * Markdown text content of the message. Can be provided in place of `text`. Cannot be used with `htmlText`. Will be converted to `htmlText` upon reception. If converted `htmlText` exceeds 4096 characters, the message will be rejected. If no `text` is provided, will be converted to `text` upon reception to be displayed on channels that do not support rich text. See [rich text](https://docs.smooch.io/guide/structured-messages/rich-text) documentation for more information.
 * @member {String} markdownText
 */
FileMessage.prototype['markdownText'] = undefined;

/**
 * An identifier used by Sunshine Conversations for internal purposes.
 * @member {String} attachmentId
 */
FileMessage.prototype['attachmentId'] = undefined;






export default FileMessage;

